{"name":"Nodoc","tagline":"Easy, Simplified, Documentation Syntax Block Proposal for the JavaScript Language","body":"# Nodoc\r\n\r\n> Version 0.2\r\n\r\nSimplifying how to document code for Javascript and other languages if you want.\r\n\r\n***\r\n\r\n### Basics\r\n\r\nHere is our test code:\r\n\r\n```\r\nfunction equalsIgnoreCase (a, b) {\r\n  return (a == b) ? true : (\r\n    (!b.isEmpty()) && \r\n    (b.length == a.length) && \r\n    (a.toLowerCase() == b.toLowerCase())\r\n  );\r\n}\r\n```\r\n\r\n1. Single line comment notation only unless language does not support this notation.\r\n2. Markdown is to be assumed as the parsing language.\r\n\r\nAn example nodoc block for this would resemble:\r\n\r\n```\r\n// Compares two strings for equality ignoring case sensitivity.\r\n//\r\n// - `a` `String` *Value to be compared against.*\r\n// - `b` `String` *Value used for comparing against.*\r\n//\r\n// Example: (javascript)\r\n//\r\n//     // returns true\r\n//     console.log(equalsIgnoreCase(\"hello World\", \"hello world\"));\r\n//\r\n```\r\n\r\n#### Github Flavoured Output\r\n\r\nCompares two strings for equality ignoring case sensitivity.\r\n\r\n- `a` `String` *Value to be compared against.*\r\n- `b` `String` *Value used for comparing against.*\r\n\r\nExample:\r\n\r\n```javascript\r\n     // returns true\r\n     console.log(equalsIgnoreCase(\"hello World\", \"hello world\"));\r\n```\r\n\r\n#### Raw Output\r\n\r\nCompares two strings for equality ignoring case sensitivity.\r\n\r\n- `a` `String` *Value to be compared against.*\r\n- `b` `String` *Value used for comparing against.*\r\n\r\nExample: (javascript)\r\n\r\n     // returns true\r\n     console.log(equalsIgnoreCase(\"hello World\", \"hello world\"));\r\n     \r\n## Breakdown\r\n\r\n`[]` denotes required, `()` denotes optional\r\n\r\n```\r\n// [Details regarding what method / function does]\r\n//\r\n// [Argument details list]\r\n// [- `Argument` `Type` (___Priority___) *Information*]\r\n//\r\n// (Example: (language))\r\n// (… code indented by four spaces …)\r\n//\r\n// (Return: `Type` *Information*)\r\n// (Key: Value)\r\n```\r\n\r\n\r\n## Types Enum for Javascript\r\n\r\n- `Mixed` *Can be a variety, explain upon necessity.*\r\n- `Object`\r\n- `Array`\r\n- `Function`\r\n- `String`\r\n- `Number`\r\n- `Boolean`\r\n- `Date`\r\n- `RegExp`\r\n- `Null`\r\n- `Undefined`\r\n- `NaN`\r\n\r\n## Extra Details\r\n\r\n### Nest Information\r\n\r\nInstead of having argument details and information on the same line, you can nest it below to keep readability a little higher.\r\n\r\n```\r\n// …\r\n// - `Argument` `Type`\r\n//   *Information regarding argument can go here*\r\n// …\r\n```\r\n\r\n### Object Argument Information\r\n\r\nHow to document out an options or `Object` argument on a method or function:\r\n\r\n```\r\n// …\r\n// - `options` `Object` *Information about Options Object*\r\n//     - `Argument` `Type` *Information details regarding Argument*\r\n//     - …\r\n// - `callback` `Function` *Information about Another Argument*\r\n// …\r\n```\r\n\r\n### Required and Optional\r\n\r\nIf you have required and optional parameters, the importance should be wrapped in bold & italics underscore syntax. You can choose either to do this with `Required` or `Optional` and it should like like so: `___Optional___`\r\n\r\n***\r\n\r\n**Note:** Originally this was meant to be a simple wrapping the argument code snippet with bold syntax, however github does not support bolding inline code snippets.\r\n\r\n***\r\n\r\n```\r\n// … \r\n// - `Argument` `Type` ___Required___ *Information detailing argument*\r\n// - `callback` `Function` *Invoked after a result has been calculated*\r\n// … \r\n```\r\n\r\n#### Outputs\r\n\r\n- `Argument` `Type` ___Required___ *Information detailing argument*\r\n- `callback` `Function` *Invoked after a result has been calculated*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}